[tool.poetry]
name = "clearaudio"
version = "0.1.0"
description = "A Python project to restore audio files"
authors = ["Kirell Benzi <kirell.benzi@epfl.ch>"]
license = "BSD-3-Clause"
readme = "README.md"
keywords = ["audio", "gan", "superresolution", "torch"]
repository = "https://github.com/vita-epfl/clearaudio"

classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development",
]


[tool.poetry.dependencies]
python = ">=3.8,<3.9"
torch = "^1.10.1"
torchvision = "^0.11.2"
torchaudio = "^0.10.1"
hydra-core = "^1.1.0"
numpy = "1.21.6"
librosa = "^0.8.1"
matplotlib = "^3.4.3"
pandas = "^1.3.4"
clearml = "^1.3.1"
submitit = "^1.4.1"
tqdm = "^4.62.3"
tensorboard = "^2.7.0"
setuptools = "59.5.0"
blobfile = "^2.0.2"
numba = "0.56.4"
diffusers = "^0.25.0"
accelerate = "^0.25.0"
torchmetrics = {extras = ["image"], version = "^1.2.1"}
frechet-audio-distance = "0.1.*"


[tool.poetry.dev-dependencies]
pytest = "^5.2"
poethepoet = "^0.10.0"
black = "^21.7b0"
isort = "^5.9.3"
flake8 = "^3.9.2"
jupyterlab = "^3.1.11"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.poe.tasks]
force-cuda11 = "pip3 install torch==1.10.2+cu113 torchvision==0.11.3+cu113 torchaudio===0.10.2+cu113 -f https://download.pytorch.org/whl/cu113/torch_stable.html"
force-cuda11b = 'pip3 install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu113'
black = "black ."
isort = "isort ."

check = ['isort', 'black']
test = "pytest --disable-pytest-warnings"

create = "python -m clearaudio.create_dataset dataset=maestro_local trainer=base_trainer"
dummy-train = "python -m clearaudio.dummy_train dataset=maestro_local trainer=base_trainer"
dummy-train-multi.shell="OMP_NUM_THREADS=10 torchrun --standalone --nnodes=1 --nproc_per_node=2 -m clearaudio.dummy_train dataset=maestro_local trainer=base_trainer"


# Trainers
yesno-diffusion-scitas = "python -m clearaudio.train trainer=diffusion_scitas"
yesno-diffusion-local = "python -m clearaudio.train trainer=diffusion_local"
maestro-diffusion-scitas = "python -m clearaudio.train trainer=maestro_diffusion_scitas dataset=maestro_scitas_diffusion"
maestro-diffusion-local = "python -m clearaudio.train trainer=maestro_diffusion_local"
maestro-scitas = "python -m clearaudio.train dataset=maestro_scitas trainer=maestro_wavenet_scitas"
maestro-local = "python -m clearaudio.train dataset=maestro_local trainer=wavenet_local"
maestro-local-multi.shell="OMP_NUM_THREADS=10 torchrun --standalone --nnodes=1 --nproc_per_node=2 -m clearaudio.train dataset=maestro_local trainer=wavenet_local"
maestro-local-w16-multi.shell="OMP_NUM_THREADS=10 torchrun --standalone --nnodes=1 --nproc_per_node=3 -m clearaudio.train dataset=maestro_local_w16 trainer=wavenet_local_w16"
maestro-vq = "python -m clearaudio.train dataset=maestro_scitas trainer=vqvae"
tan-scitas = "python -m clearaudio.train dataset=tan_scitas trainer=tan_wavenet_scitas"
tan-vq = "python -m clearaudio.train dataset=tan_scitas trainer=tan_vqvae"

# Generator
diffusion-generator-local = "python -m clearaudio.generate generator=diffusion_generator trainer=diffusion_local"
maestro-diffusion-generator-local = "python -m clearaudio.generate generator=diffusion_generator trainer=maestro_diffusion_local"
wavenet-generator-local = "python -m clearaudio.generate generator=base_generator trainer=wavenet_local dataset=maestro_local"
tan-generator = "python -m clearaudio.generate generator=tan_generator trainer=tan_wavenet_local dataset=tan_local"

[tool.black]
line-length = 119
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
known_first_party = 'clearaudio'
known_third_party = ["torch", "hydra", "pytest"]
multi_line_output = 3
lines_after_imports = 2
force_grid_wrap = 0
combine_as_imports = true
include_trailing_comma = true